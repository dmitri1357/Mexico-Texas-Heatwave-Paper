#!/usr/bin/env python3

# Fig 1a

import numpy as np
import xarray as xr
import pandas as pd
from scipy import stats
from collections import Counter
import matplotlib.pyplot as plt   
from mpl_toolkits.basemap import Basemap
from tqdm import tqdm

# set font to Arial
import matplotlib as mpl
mpl.rc('font',family='Arial')

# Tmax dataset can be found in accompanying Zenodo repository
ds = xr.open_dataset('tmax_amjjas2_z.nc')
tmax_amjjas2_z = ds.tmax.values

var = tmax_amjjas2_z[15269,:] # 6/20/23

lat = np.arange(14.75,36.76,0.25)
lon = np.arange(-118.5,-86.74,0.25)
lon, lat = np.meshgrid(lon, lat)

plt.figure(figsize=(10, 8))
m = Basemap(projection='lcc', area_thresh=10000, resolution='l',
            width=3.3E6, height=3.3E6,
            lat_0=25, lon_0=-102)
m.fillcontinents(color='white',lake_color='white',alpha=1,zorder=0)
m.drawstates(linewidth=0.5,linestyle='solid',color='k')
m.drawcountries(linewidth=0.5,linestyle='solid',color='k')
m.drawcoastlines(color='black')
m.pcolormesh(lon, lat, var, latlon=True, cmap=plt.cm.get_cmap('RdBu_r',24))
cb = plt.colorbar(ticks=np.arange(-3,3.1,1),extend='max')
cb.ax.tick_params(labelsize=23)
plt.title('Standardized Tmax anomalies on June 20, 2023', size=20)
plt.clim(-3,3)
m.readshapefile('texas_mexico',name='null',color='b',linewidth=2) # shapefile of Mexico-Texas domain can be found in accompanying Zenodo repository
plt.savefig('fig_5a.pdf',dpi=600)

# Fig 1b

# datasets can be found in accompanying Zenodo repository
ds = xr.open_dataset('tmax_z_normed2.nc')
tmax_z_normed = ds.tmax_z.values

dates = pd.date_range(start='1/1/1940', end='12/31/2023')
dates = dates[~((dates.month == 2) & (dates.day == 29))] # index takes into account that I removed leap days
dates = pd.DataFrame(dates)
dates['month'] = pd.to_datetime(dates.iloc[:,0]).dt.month
dates = dates[dates.month.isin([4,5,6,7,8,9])]
dates.drop(columns='month',inplace=True)

dates['z_mean'] = tmax_z_normed
data = np.array(dates.z_mean)

# calculate longest streak in each year
streaks = np.empty(84)
data_years = np.split(data,84)
for k in range(84):
    yr = data_years[k]
    streaks[k] = np.nanmax(yr)

# calculate slope of linear trend
x = np.arange(84)
y = streaks
intercept = stats.linregress(x,y)[1]
slope = stats.linregress(x,y)[0]
vals1 = []
for j in range(84):
    intercept += slope
    vals1.append(intercept)
slope * 84 # +3.9 days

# permutation test for statistical significance
x = np.arange(84)
slopes1 = np.empty(10000)
for k in range(10000):
    run = np.random.permutation(streaks)
    slopes1[k] = stats.linregress(x,run)[0]
slope_perm = stats.percentileofscore(slopes1, slope)

#poly = np.polyfit(x,y,deg=3)

fig = plt.figure(figsize=(8,6))
plt.plot(streaks,'-o', color='firebrick')
plt.plot(vals1,'--', color='tab:brown')
#plt.plot(np.polyval(poly, x),'--', color='firebrick')
plt.grid(linewidth=0.5)
plt.xticks(np.arange(0,81,10), ('1940','1950','1960','1970','1980',
                                '1990','2000','2010','2020'), fontsize = 13)
plt.yticks(np.arange(0,4.01,0.5), fontsize=13)
plt.ylabel('Tmax standardized anomaly', fontsize = 15)
plt.title('Highest daily value each year', fontsize = 20)

# Fig 1c

ds = xr.open_dataset('grid_cell_areas_sqkm.nc')
actual_areas = ds.area.values # areas of grid cells in sqkm
tvec = np.reshape(tmax_amjjas2_z,(15372,11392))

# calculate extent using actual areas in sqkm
extent2sigma = np.empty(15372)
for k in tqdm(range(15372)):
    day = tvec[k,:]
    x1 = np.where(day>=2)[0]
    x2 = actual_areas[x1]
    extent2sigma[k] = np.sum(x2)/2618551

extent2sigma = extent2sigma * 100
splits = np.split(extent2sigma,84)
max_extents = np.empty(84)
for k in range(84):
    year = splits[k]
    max_extents[k] = np.nanmax(year)

# calculate slope of linear trend
x = np.arange(84)
y = max_extents
intercept = stats.linregress(x,y)[1]
slope = stats.linregress(x,y)[0]
vals1 = []
for j in range(84):
    intercept += slope
    vals1.append(intercept)
slope * 84 # +13.3 days

poly = np.polyfit(x,y,deg=2)

fig = plt.figure(figsize=(8,6))
plt.plot(max_extents,'-o', color='b')
plt.plot(np.polyval(poly, x),'--', color='b')
plt.xticks(np.arange(0,81,10), ('1940','1950','1960','1970','1980',
                                '1990','2000','2010','2020'), fontsize = 13)
plt.yticks(np.arange(0,60.1,10), fontsize=13)
plt.ylabel('Percent of domain', fontsize = 15)
plt.title('Largest daily extent with Tmax >2 sd each year', fontsize = 20)
plt.savefig('fig_1c.pdf',dpi=600)

# Fig 1d

vals = tmax_z_normed
sigma = np.where(vals>=2,1,0) # the "vals>=2" specifies that I'm only looking for values greater/equal than 2 s.d.

# calculate longest streak in each year that had domain-averaged tmax >2 s.d.

start_year = 1940
end_year = 2023

length_of_record = int((end_year+1)-start_year)
streaks = np.empty(length_of_record)
years = np.arange(start_year,end_year+1,1)
data_years = np.split(sigma,length_of_record)
for k in range(length_of_record):
    year = years[k]
    dates = pd.date_range(start=f'4/1/{year}', end=f'9/30/{year}')
    occ = pd.Series(data_years[k])
    only = occ[occ == 1]
    occurs = dates[only.index]
    occurs = pd.DataFrame(occurs).rename(columns={0:'date'})
    dt = occurs['date']
    day = pd.Timedelta('1d')
    breaks = dt.diff() != day
    groups = breaks.cumsum()
    groups1 = Counter(groups)
    if len(groups1) > 0:
        val = np.max(list(groups1.values()))
        streaks[k] = val
    else:
        streaks[k] = 0

# get linear trend over 84 year period
x = np.arange(84)
y = streaks
intercept = stats.linregress(x,y)[1]
slope = stats.linregress(x,y)[0]
vals1 = []
for j in range(84):
    intercept += slope
    vals1.append(intercept)
slope * 84 # +3.9 days

# permutation test (n=10,000 iterations) to obtain significance of trend
x = np.arange(84)
slopes1 = np.empty(10000)
for k in range(10000):
    run = np.random.permutation(streaks)
    slopes1[k] = stats.linregress(x,run)[0]
slope_perm = stats.percentileofscore(slopes1, slope)

poly = np.polyfit(x,y,deg=3)

fig = plt.figure(figsize=(8,6))
plt.plot(streaks,'-o', color='orangered')
#plt.plot(vals1,'--', color='tab:brown')
#plt.plot(np.polyval(poly, x),'--', color='firebrick')
#plt.grid(linewidth=0.5)
plt.xticks(np.arange(0,81,10), ('1940','1950','1960','1970','1980',
                                '1990','2000','2010','2020'), fontsize = 13)
plt.yticks(np.arange(0,16.1,2), fontsize=13)
#plt.ylabel('Number of consecutive days', fontsize = 15)
#plt.title('Longest streaks of domain-averaged >2 s.d. Tmax', fontsize = 20)
plt.savefig('fig_1b.pdf',dpi=600)

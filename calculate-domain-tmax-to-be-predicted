#!/usr/bin/env python3

# calculate area-averaged and latitude-normalized (area-weighted) average Tmax over the MXTX domain
# this is the value that the analogues are attempting to predict

tmax_1940_2022 = np.load('tmax_1940_2022.npy')
tmax_2023 = np.load('tmax_2023.npy')
tmax_all = np.concatenate([tmax_1940_2022,tmax_2023],axis=0)

dates = pd.date_range(start='1/1/1940', end='12/31/2023')
dates = dates[~((dates.month == 2) & (dates.day == 29))] # index takes into account that I removed leap days
dates = pd.DataFrame(dates)
dates['month'] = pd.to_datetime(dates.iloc[:,0]).dt.month
dates = dates[~(dates.month == 1)]
dates = dates[~(dates.month == 2)]
dates = dates[~(dates.month == 3)]
dates = dates[~(dates.month == 10)]
dates = dates[~(dates.month == 11)]
dates = dates[~(dates.month == 12)]
idx = dates.index.values

tmax_amjjas = tmax_all[idx,:]
tmax_amjjas = np.reshape(tmax_amjjas,(15372,32361))
tmax_amjjas = np.swapaxes(tmax_amjjas,1,0)

# flip lats 
tvec = np.reshape(tmax_amjjas,(161,201,15372))
tmax_flipped = np.empty([161,201,15372])
for k in range(15372):
    day = tvec[:,:,k]
    tmax_flipped[:,:,k] = np.flipud(day)

raster_vec = np.load('raster_vec.npy')

tmax_amjjas = np.reshape(tmax_flipped,(32361,15372))
tmax_amjjas2 = np.empty([32361,15372])
for k in tqdm(range(15372)):
    day = tmax_amjjas[:,k]
    tmax_amjjas2[:,k] = np.where(~np.isnan(raster_vec),day,raster_vec)
    
tmax_amjjas2 = np.swapaxes(tmax_amjjas2,1,0)

tvec = np.reshape(tmax_amjjas2,(15372,161,201))

# subset back to bbox to make smaller array
tmax_subset = tvec[:,39:128,26:154]

# map to make sure things look correct
var = tmax_subset[15269,:]

lat = np.arange(14.75,36.76,0.25)
lon = np.arange(-118.5,-86.74,0.25)
lon, lat = np.meshgrid(lon, lat)

plt.figure(figsize=(10, 8))
m = Basemap(projection='lcc', area_thresh=10000, resolution='l',
            width=3.3E6, height=3.3E6,
            lat_0=25, lon_0=-102)
m.fillcontinents(color='white',lake_color='white',alpha=1,zorder=0)
m.drawstates(linewidth=0.5,linestyle='solid',color='k')
m.drawcountries(linewidth=0.5,linestyle='solid',color='k')
m.drawcoastlines(color='black')
m.pcolormesh(lon, lat, var, latlon=True, cmap=plt.cm.get_cmap('rainbow'))
plt.colorbar()
#plt.clim(-3,3)

np.save('tmax_amjjas2',tmax_subset.astype('float32'))
tmax_amjjas2 = np.load('tmax_amjjas2.npy')

## calculate latitude weights

lats = np.arange(14.75,36.76,0.25)
lons = np.arange(-118.5,-86.74,0.25)
lats = np.append(lats,37)
lons = np.append(lons,-86.5)

lat_diff = 0.25
lat_dist = np.abs(lat_diff * 111) # km for one degree of latitude in the mid-latitudes
lon_diff = 0.25

areas = np.empty([89,128])
for i in range(89): # 89 latitude bands at 0.25 deg resolution
    lat1 = lats[i] # grab current latitude
    for j in range(128): # 128 longitude bands
        lon1 = lons[j] # left edge
        lon2 = lons[j+1] # right edge
        cosrad = np.cos(np.deg2rad(lat1)) 
        deg1 = cosrad * 111.32 # 111.32 km for one degree of longitude at equator
        lon_dist = deg1 * lon_diff
        areas[i,j] = lat_dist * lon_dist

area_vec = np.reshape(areas,11392)
np.mean(area_vec)
np.save('actual_areas',area_vec)
actual_areas = np.load('actual_areas.npy')

tvec = np.reshape(tmax_amjjas2_z,(15372,11392))

# find area of all grid cells in domain
maxs = np.nanmax(tvec,axis=0)
np.nanmax(maxs)
np.nanmin(maxs)
cell_idx = np.where(maxs>0)[0]
cell_areas = actual_areas[cell_idx]
np.sum(cell_areas) # 2,618,551 sq. km.

# find the middle value, and normalize the domain by this value
norm_middle = ((np.max(area_vec) - np.min(area_vec)) / 2) + np.min(area_vec)
area_vec = area_vec/norm_middle # ~682.8 sqkm is middle area

np.save('area_vec',area_vec)
area_vec = np.load('area_vec.npy')

# plot the weights

var = np.reshape(area_vec,(89,128))

lat = np.arange(14.75,36.76,0.25)
lon = np.arange(-118.5,-86.74,0.25)
lon, lat = np.meshgrid(lon, lat)

plt.figure(figsize=(10, 8))
m = Basemap(projection='lcc', area_thresh=10000, resolution='l',
            width=3.3E6, height=3.3E6,
            lat_0=25, lon_0=-102)
m.fillcontinents(color='white',lake_color='white',alpha=1,zorder=0)
m.drawstates(linewidth=0.5,linestyle='solid',color='k')
m.drawcountries(linewidth=0.5,linestyle='solid',color='k')
m.drawcoastlines(color='black')
m.pcolormesh(lon, lat, var, latlon=True, cmap=plt.cm.get_cmap('rainbow'))
plt.colorbar()

# plot the actual areas

var = np.reshape(actual_areas,(89,128))

lat = np.arange(14.75,36.76,0.25)
lon = np.arange(-118.5,-86.74,0.25)
lon, lat = np.meshgrid(lon, lat)

plt.figure(figsize=(10, 8))
m = Basemap(projection='lcc', area_thresh=10000, resolution='l',
            width=3.3E6, height=3.3E6,
            lat_0=25, lon_0=-102)
m.fillcontinents(color='white',lake_color='white',alpha=1,zorder=0)
m.drawstates(linewidth=0.5,linestyle='solid',color='k')
m.drawcountries(linewidth=0.5,linestyle='solid',color='k')
m.drawcoastlines(color='black')
m.pcolormesh(lon, lat, var, latlon=True, cmap=plt.cm.get_cmap('rainbow'))
plt.colorbar()

# latitude-normalize the variable

tmax_amjjas2 = np.load('tmax_amjjas2.npy')
tvec = np.reshape(tmax_amjjas2,(15372,11392))

tmax_normed = np.empty([15372,11392])
for k in range(15372):
    day = tvec[k,:]
    tmax_normed[k,:] = day/area_vec

np.save('tmax_normed',tmax_normed.astype('float32'))
